// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protos/user/auth/service.proto

package uapb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserAuthServiceClient is the client API for UserAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAuthServiceClient interface {
	// Unary
	FindBy(ctx context.Context, in *UserFindByRequest, opts ...grpc.CallOption) (*UserFindByResponse, error)
	Store(ctx context.Context, in *UserStoreRequest, opts ...grpc.CallOption) (*UserStoreResponse, error)
}

type userAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAuthServiceClient(cc grpc.ClientConnInterface) UserAuthServiceClient {
	return &userAuthServiceClient{cc}
}

func (c *userAuthServiceClient) FindBy(ctx context.Context, in *UserFindByRequest, opts ...grpc.CallOption) (*UserFindByResponse, error) {
	out := new(UserFindByResponse)
	err := c.cc.Invoke(ctx, "/user.auth.service.UserAuthService/FindBy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthServiceClient) Store(ctx context.Context, in *UserStoreRequest, opts ...grpc.CallOption) (*UserStoreResponse, error) {
	out := new(UserStoreResponse)
	err := c.cc.Invoke(ctx, "/user.auth.service.UserAuthService/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAuthServiceServer is the server API for UserAuthService service.
// All implementations should embed UnimplementedUserAuthServiceServer
// for forward compatibility
type UserAuthServiceServer interface {
	// Unary
	FindBy(context.Context, *UserFindByRequest) (*UserFindByResponse, error)
	Store(context.Context, *UserStoreRequest) (*UserStoreResponse, error)
}

// UnimplementedUserAuthServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserAuthServiceServer struct {
}

func (UnimplementedUserAuthServiceServer) FindBy(context.Context, *UserFindByRequest) (*UserFindByResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindBy not implemented")
}
func (UnimplementedUserAuthServiceServer) Store(context.Context, *UserStoreRequest) (*UserStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}

// UnsafeUserAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAuthServiceServer will
// result in compilation errors.
type UnsafeUserAuthServiceServer interface {
	mustEmbedUnimplementedUserAuthServiceServer()
}

func RegisterUserAuthServiceServer(s grpc.ServiceRegistrar, srv UserAuthServiceServer) {
	s.RegisterService(&UserAuthService_ServiceDesc, srv)
}

func _UserAuthService_FindBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFindByRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServiceServer).FindBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.auth.service.UserAuthService/FindBy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServiceServer).FindBy(ctx, req.(*UserFindByRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuthService_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServiceServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.auth.service.UserAuthService/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServiceServer).Store(ctx, req.(*UserStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAuthService_ServiceDesc is the grpc.ServiceDesc for UserAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.auth.service.UserAuthService",
	HandlerType: (*UserAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindBy",
			Handler:    _UserAuthService_FindBy_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _UserAuthService_Store_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/user/auth/service.proto",
}
